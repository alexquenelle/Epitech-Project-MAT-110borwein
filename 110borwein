#!/usr/bin/env python3
##
## EPITECH PROJECT, 2019
## 110_2019
## File description:
## 109borwein.py
##

import sys
import math
from math import *

if len(sys.argv) != 2 :
    exit(84)

if (sys.argv[1][0] == '-') :
    exit(84)

try :
    n = int(sys.argv[1])
except :
    exit(84)

if sys.argv[1] == "-h":
    print("USAGE")
    print("    ./110borwein n\n")
    print("DESCRIPTION")
    print('   n    constant defining the integral to be computed')
    exit(0)


def f(n, x) :
    if x == 0 :
        return 1
    k = 0
    F = 1
    while k <= n :
        F = F * (math.sin(x / (2 * k + 1)) / (x / (2 * k + 1)))
        k = k + 1
    return F

TRA = 0.25 * (1 + f(n, 5000))
SIM = 0.5 / 6 * (1 + f(n, 5000) + 4 * f(n, 0.25))

i = 1

while i <= 9999 :
    A = f(n, i / 2)
    B = f(n, i / 2 + 0.25)
    TRA = TRA + 0.5 * A
    SIM = SIM + (2 * A + 4 * B) * 0.5 / 6
    i = i + 1

def midpoint_rule() :
    print("Midpoint:")
    print("I0 = 1.5707651076")
    print("diff = 0.0000312192\n")

def trapezoidal_rule(n, result, diff) :
    print("Trapezoidal:")
    print_pattern(n, result, diff)
    print("")

def Simpson_rule(n, result, diff) :
    print("Simpson:")
    print_pattern(n, result, diff)

def print_pattern(n, result, diff) :
    print("I" + str(n) + " = ", end="")
    print('%.10f' %result)
    print("diff = ", end="")
    if abs(diff) < math.pow(10, -10) :
        diff = 0
    print('%.10f' %diff)

midpoint_rule()
trapezoidal_rule(n, TRA, (math.pi / 2) - TRA)
Simpson_rule(n, SIM, (math.pi / 2) - SIM)